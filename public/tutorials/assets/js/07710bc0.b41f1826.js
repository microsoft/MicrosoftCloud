"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[428],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},x={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=i,f=u["".concat(p,".").concat(d)]||u[d]||x[d]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},249:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>x,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={title:"4. Defining AAD Provider in Next.js",sidebar_position:1},a=void 0,s={unversionedId:"Authentication-App-With-NextJs-And-Microsoft-Graph/Defining-AAD-Provider-NextJs",id:"Authentication-App-With-NextJs-And-Microsoft-Graph/Defining-AAD-Provider-NextJs",title:"4. Defining AAD Provider in Next.js",description:"Before we start creating the pages, we need to define the AAD provider in NextAuth.",source:"@site/docs/Authentication-App-With-NextJs-And-Microsoft-Graph/04-Defining-AAD-Provider-NextJs.md",sourceDirName:"Authentication-App-With-NextJs-And-Microsoft-Graph",slug:"/Authentication-App-With-NextJs-And-Microsoft-Graph/Defining-AAD-Provider-NextJs",permalink:"/MicrosoftCloud/tutorials/docs/Authentication-App-With-NextJs-And-Microsoft-Graph/Defining-AAD-Provider-NextJs",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"4. Defining AAD Provider in Next.js",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"3. Creating the Application Components",permalink:"/MicrosoftCloud/tutorials/docs/Authentication-App-With-NextJs-And-Microsoft-Graph/Creating-Application-Components"},next:{title:"5. Creating the pages for the application",permalink:"/MicrosoftCloud/tutorials/docs/Authentication-App-With-NextJs-And-Microsoft-Graph/Creating-Pages-For-The-Application"}},p={},l=[],c={toc:l};function x(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Before we start creating the pages, we need to define the AAD provider in NextAuth. "),(0,i.kt)("p",null,"But what is AAD? AAD stands for Azure Active Directory. It is a cloud-based identity and access management service that helps you manage access to your applications and services. "),(0,i.kt)("p",null,"For this, inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"pages/api")," folder create a new folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"auth"),". Inside in this folder, create the file ",(0,i.kt)("inlineCode",{parentName:"p"},"[...nextauth].ts")," and add the following code:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pages/api/auth/[...nextauth].ts"))),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"pages/api/auth/[...nextauth].ts")),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import NextAuth, { NextAuthOptions } from \"next-auth\";\nimport AzureADProvider from 'next-auth/providers/azure-ad';\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    AzureADProvider({\n      clientId: process.env.AZURE_AD_CLIENT_ID,\n      clientSecret: process.env.AZURE_AD_CLIENT_SECRET,\n      tenantId: process.env.AZURE_AD_TENANT_ID,\n    })\n  ]\n}\n\nexport default NextAuth(authOptions);\n"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"Now we need to use the environment variables that we created before in Azure Portal in AAD. So let's create the ",(0,i.kt)("inlineCode",{parentName:"p"},".env.local")," file in the root of the project and add the following code:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".env.local"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"AZURE_AD_CLIENT_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nAZURE_AD_CLIENT_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nAZURE_AD_TENANT_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nNEXTAUTH_SECRET=123\n")),(0,i.kt)("p",null,"If you want, I created a file called ",(0,i.kt)("inlineCode",{parentName:"p"},".env.local.template")," as sample. You can use as a reference."),(0,i.kt)("p",null,"Now we need to configure the main project in the project. So let's do it! Open the ",(0,i.kt)("inlineCode",{parentName:"p"},"pages/_app.tsx")," file and add the following code:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pages/_app.tsx"))),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"pages/_app.tsx")),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { SessionProvider } from 'next-auth/react';\n\nimport type { AppProps } from 'next/app';\nimport type { Session } from 'next-auth';\n\nexport default function App({\n  Component,\n  pageProps: { session, ...pageProps },\n}: AppProps<{ session: Session }>) {\n  return (\n    <SessionProvider session={session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  );\n}\n"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"We are here defining the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionProvider")," from the NextAuth.js. It is responsible for managing the session of the user. "),(0,i.kt)("p",null,"Now let's run the application again e then open the browser and access the following URL: ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),". If you see the following screen, it means that everything is working fine:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image-16",src:n(602).Z,width:"1874",height:"867"})),(0,i.kt)("p",null,"Page links are still not working. But we will fix it in the next section. Let's create these pages in the next section."))}x.isMDXComponent=!0},602:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image-16-816651cff52d83b75c017cbeda1cf2cd.jpg"}}]);